generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT
// ================================

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  displayName       String?
  password          String
  role              String    @default("USER")
  bio               String?
  joinDate          DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  comments          Comment[]
  favorites         Favorite[]
  receivedMessages  Message[] @relation("MessageReceiver")
  sentMessages      Message[] @relation("MessageSender")
  addedMovies       Movie[]
  watchlist         Watchlist[]

  @@map("users")
}

// ================================
// MOVIES & CONTENT
// ================================

model Movie {
  id               String    @id @default(cuid())
  tmdbId           Int?      @unique @default(0)
  imdbId           String?
  title            String
  originalTitle    String?
  overview         String?
  tagline          String?
  releaseDate      DateTime?
  year             Int?
  runtime          Int
  posterPath       String?
  backdropPath     String?
  adult            Boolean   @default(false)
  popularity       Float     @default(0)
  voteAverage      Float     @default(0)
  voteCount        Int       @default(0)
  localVoteCount   Int       @default(0)
  localVoteAverage Float     @default(0)
  favoriteCount    Int       @default(0)
  commentCount     Int       @default(0)
  addedById        String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relationships
  comments        Comment[]
  favorites       Favorite[]
  cast            MovieCast[]
  crew            MovieCrew[]
  genres          MovieGenre[]
  addedBy         User?             @relation(fields: [addedById], references: [id])
  watchlist       Watchlist[]
  weeklyItems     WeeklyListMovie[]

  @@map("movies")
}

model Genre {
  id     String       @id @default(cuid())
  tmdbId Int          @unique @default(0)
  name   String       @unique
  slug   String       @unique
  movies MovieGenre[]

  @@map("genres")
}

model MovieGenre {
  movieId String
  genreId String
  
  genre Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([movieId, genreId])
  @@map("movie_genres")
}

model Person {
  id           String      @id @default(cuid())
  tmdbId       Int         @unique @default(0)
  name         String
  profilePath  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  castRoles MovieCast[]
  crewRoles MovieCrew[]

  @@map("people")
}

model MovieCast {
  id        String @id @default(cuid())
  movieId   String
  personId  String
  character String
  order     Int
  
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  movie  Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, personId, character])
  @@map("movie_cast")
}

model MovieCrew {
  id         String @id @default(cuid())
  movieId    String
  personId   String
  job        String
  department String
  
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  movie  Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, personId, job])
  @@map("movie_crew")
}

// ================================
// SOCIAL FEATURES
// ================================

model Comment {
  id           String    @id @default(cuid())
  userId       String
  movieId      String
  content      String?
  parentId     String?
  rating       Int       @default(0)
  likeCount    Int       @default(0)
  dislikeCount Int       @default(0)
  replyCount   Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")
  movie   Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  movieId   String
  createdAt DateTime @default(now())
  
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@map("favorites")
}



model Watchlist {
  id        String    @id @default(cuid())
  userId    String
  movieId   String
  watched   Boolean   @default(false)
  createdAt DateTime  @default(now())
  watchedAt DateTime?
  
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@map("watchlist")
}



model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  type       String   @default("DIRECT")
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// ================================
// ADMIN FEATURES
// ================================

model WeeklyList {
  id          String            @id @default(cuid())
  title       String
  description String?
  theme       String?
  startDate   DateTime
  endDate     DateTime
  status      String            @default("UPCOMING")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  movies WeeklyListMovie[]

  @@map("weekly_lists")
}

model WeeklyListMovie {
  id           String @id @default(cuid())
  weeklyListId String
  movieId      String
  position     Int
  voteCount    Int    @default(0)
  
  movie      Movie      @relation(fields: [movieId], references: [id], onDelete: Cascade)
  weeklyList WeeklyList @relation(fields: [weeklyListId], references: [id], onDelete: Cascade)

  @@unique([weeklyListId, movieId])
  @@map("weekly_list_movies")
}
