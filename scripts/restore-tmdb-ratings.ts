import { PrismaClient } from '@prisma/client';
import 'dotenv/config';

const prisma = new PrismaClient();

const TMDB_API_KEY = process.env.TMDB_API_KEY;
const TMDB_API_BASE_URL = 'https://api.themoviedb.org/3';

interface TmdbMovieDetails {
  id: number;
  title: string;
  vote_average: number;
  vote_count: number;
  popularity: number;
}

async function fetchTmdbMovieDetails(tmdbId: number): Promise<TmdbMovieDetails | null> {
  try {
    const response = await fetch(`${TMDB_API_BASE_URL}/movie/${tmdbId}?api_key=${TMDB_API_KEY}`);
    
    if (!response.ok) {
      console.warn(`‚ùå TMDB API hatasƒ± (${response.status}) film ID: ${tmdbId}`);
      return null;
    }
    
    const data = await response.json();
    return data;
  } catch (error) {
    console.error(`‚ùå Film detaylarƒ± alƒ±nƒ±rken hata olu≈ütu (TMDB ID: ${tmdbId}):`, error);
    return null;
  }
}

async function restoreTmdbRatings() {
  console.log('üé¨ TMDB puanlarƒ± geri y√ºkleniyor...\n');

  try {
    // TMDB ID'si olan t√ºm filmleri al
    const movies = await prisma.movie.findMany({
      where: {
        tmdbId: {
          not: null
        }
      },
      select: {
        id: true,
        tmdbId: true,
        title: true,
        voteAverage: true,
        voteCount: true,
        localVoteAverage: true,
        localVoteCount: true
      }
    });

    console.log(`üìä ${movies.length} film bulundu.\n`);

    let updatedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;

    for (const movie of movies) {
      if (!movie.tmdbId) {
        skippedCount++;
        continue;
      }

      console.log(`üîÑ "${movie.title}" i√ßin TMDB puanlarƒ± kontrol ediliyor...`);
      
      // TMDB'den g√ºncel verileri al
      const tmdbData = await fetchTmdbMovieDetails(movie.tmdbId);
      
      if (!tmdbData) {
        console.warn(`‚ö†Ô∏è "${movie.title}" i√ßin TMDB verisi alƒ±namadƒ±, ge√ßiliyor.\n`);
        errorCount++;
        continue;
      }

      // G√ºncel TMDB puanlarƒ± ile veritabanƒ±nƒ± kar≈üƒ±la≈ütƒ±r
      const currentVoteAverage = Number(movie.voteAverage);
      const newVoteAverage = Number(tmdbData.vote_average);
      
      if (Math.abs(currentVoteAverage - newVoteAverage) > 0.1) {
        // Puanlar farklƒ±, g√ºncelle
        await prisma.movie.update({
          where: { id: movie.id },
          data: {
            voteAverage: tmdbData.vote_average,
            voteCount: tmdbData.vote_count,
            popularity: tmdbData.popularity
          }
        });

        console.log(`‚úÖ "${movie.title}" g√ºncellendi:`);
        console.log(`   üìà Puan: ${currentVoteAverage} ‚Üí ${newVoteAverage}`);
        console.log(`   üó≥Ô∏è Oy sayƒ±sƒ±: ${movie.voteCount} ‚Üí ${tmdbData.vote_count}`);
        console.log(`   üìä Site i√ßi puan: ${movie.localVoteAverage} (${movie.localVoteCount} oy)`);
        console.log('');
        
        updatedCount++;
      } else {
        console.log(`‚úì "${movie.title}" zaten g√ºncel (${currentVoteAverage})\n`);
        skippedCount++;
      }

      // Rate limiting i√ßin kƒ±sa bekleme
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('\nüéâ TMDB puanlarƒ± geri y√ºkleme tamamlandƒ±!');
    console.log(`‚úÖ ${updatedCount} film g√ºncellendi`);
    console.log(`‚û°Ô∏è ${skippedCount} film zaten g√ºnceldi`);
    console.log(`‚ùå ${errorCount} filmde hata olu≈ütu`);

  } catch (error) {
    console.error('‚ùå Genel hata:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Script'i √ßalƒ±≈ütƒ±r
if (!TMDB_API_KEY) {
  console.error('‚ùå TMDB_API_KEY environment variable tanƒ±mlƒ± deƒüil!');
  process.exit(1);
}

restoreTmdbRatings()
  .then(() => {
    console.log('\n‚ú® Script ba≈üarƒ±yla tamamlandƒ±!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Script hatasƒ±:', error);
    process.exit(1);
  }); 